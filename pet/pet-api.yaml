openapi: 3.0.0
info:
  title: Pet Store API
  description: API for managing pets of different types.
tags:
  - name: Pet Management
    description: Operations for managing pets (add, update, delete)
  - name: Pet Information
    description: Operations for retrieving pet details and searching for pets
  - name: Adoption
    description: Operations related to pet adoption
  - name: Pet Health
    description: Operations for scheduling and tracking pet health checks
  - name: Pet Training
    description: Operations for managing pet training records
paths:
  /pets:
    get:
      summary: Get all pets
      description: Retrieve a list of all pets in the store.
      tags:
        - Pet Information
      responses:
        '200':
          $ref: './responses/pet-list-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
    post:
      summary: Add a new pet
      description: Create a new pet record in the system.
      tags:
        - Pet Management
      requestBody:
        description: Pet object to be added to the store.
        content:
          application/json:
            schema:
              $ref: './schemas/pet.yaml'
      responses:
        '201':
          description: Pet created successfully
        '400':
          $ref: './responses/pet-error-400-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
  /pets/{petId}:
    get:
      summary: Get pet details by ID
      description: Retrieve detailed information about a pet by its ID.
      tags:
        - Pet Information
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to retrieve.
          schema:
            type: integer
      responses:
        '200':
          $ref: './responses/pet-detail-response.yaml'
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
    put:
      summary: Update a pet's details
      description: Update the details of an existing pet by its ID.
      tags:
        - Pet Management
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to update.
          schema:
            type: integer
      requestBody:
        description: Updated pet object.
        content:
          application/json:
            schema:
              $ref: './schemas/pet.yaml'
      responses:
        '200':
          description: Pet updated successfully
        '400':
          $ref: './responses/pet-error-400-response.yaml'
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
    delete:
      summary: Delete a pet
      description: Remove a pet record from the system by its ID.
      tags:
        - Pet Management
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
  /pets/search:
    get:
      summary: Search pets by type
      description: Find pets based on their type (e.g., dog, cat).
      tags:
        - Pet Information
      parameters:
        - name: type
          in: query
          required: true
          description: The type of pet to search for.
          schema:
            type: string
      responses:
        '200':
          $ref: './responses/pet-list-response.yaml'
        '400':
          $ref: './responses/pet-error-400-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
  /pets/{petId}/adopt:
    post:
      summary: Mark a pet as adopted
      description: Mark a specific pet as adopted in the system.
      tags:
        - Adoption
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to mark as adopted.
          schema:
            type: integer
      responses:
        '200':
          description: Pet marked as adopted
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
  /pets/{petId}/health-check:
    post:
      summary: Schedule a health check for a pet
      description: Schedule a health check for a specific pet by its ID.
      tags:
        - Pet Health
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to schedule a health check for.
          schema:
            type: integer
      requestBody:
        description: Health check details to be scheduled.
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: Date of the health check.
                  example: "2025-09-10"
                veterinarian:
                  type: string
                  description: Name of the veterinarian.
                  example: "Dr. Smith"
              required:
                - date
                - veterinarian
      responses:
        '201':
          description: Health check scheduled successfully.
        '400':
          $ref: './responses/pet-error-400-response.yaml'
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'
  /pets/{petId}/training:
    post:
      summary: Add a training record for a pet
      description: Add a new training record for a specific pet by its ID.
      tags:
        - Pet Training
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to add a training record for.
          schema:
            type: integer
      requestBody:
        description: Training details to be added.
        content:
          application/json:
            schema:
              type: object
              properties:
                activity:
                  type: string
                  description: Type of training activity.
                  example: "Obedience"
                date:
                  type: string
                  format: date
                  description: Date of training.
                  example: "2025-09-12"
                trainer:
                  type: string
                  description: Name of the trainer.
                  example: "Jane Doe"
              required:
                - activity
                - date
      responses:
        '201':
          description: Training record added successfully.
        '400':
          $ref: './responses/pet-error-400-response.yaml'
        '404':
          $ref: './responses/pet-error-404-response.yaml'
        '500':
          $ref: './responses/pet-error-response.yaml'

components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum: [dog, cat, bird, fish, reptile]
        age:
          type: integer
        isAdopted:
          type: boolean
          description: Whether the pet has been adopted
      required:
        - name
        - type

responses:
  pet-error-response:
    description: Error response
    content:
      application/json:
        schema:
          type: object
          properties:
            errorCode:
              type: string
              example: PET_001
            message:
              type: string
              example: "An error occurred while processing your request."
            details:
              type: string
              example: "Invalid pet ID provided."
